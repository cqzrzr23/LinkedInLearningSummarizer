<div class="classroom-transcript__lines">
              <p class="_bodyText_1e5nen _default_1i6ulk _sizeMedium_1e5nen _lowEmphasis_1i6ulk _lineHeightOpen_1e5nen">
                - So now that we've explored what an agent is and we've looked at their key characteristics of autonomy, goal orientation, reactivity, and persistence, let's compare and contrast these agent capabilities with traditional AI and machine learning models to highlight the fundamental differences between them. Traditional AI and ML models are designed with a specific focus, pattern recognition and prediction based on what they learned from historic data. These models excel at tasks like classifying images, forecasting trends, or parsing basic language. But they do operate within a constrained framework. When you take a look at a typical ML model, what you're seeing is essentially a sophisticated input-output system. Data goes in, predictions come out. There's no initiative, no autonomous decision-making, and typically no memory of past interactions beyond what's encoded in their training data. In the past, many developers overcame that goal with frameworks and applications to orchestrate models and do particular tasks. It worked, and agents are a natural and easier evolution of this. And here's where the contrast with agents does become clear. While an ML model generally passively waits for input and produces an output based on its learned experience, an agent is more proactive. It uses the characteristics we discussed previously to actively engage with its environment. For example, consider the case of an email coming in from a customer, and agents can do sentiment on this, and depending on the sentiment being positive or negative, it can do stuff like send a thank you mail in the positive case, or in a negative case, kick off a workflow that first extracts the details that cause the negative sentiment and create an alert, maybe something like filing a support ticket. And then it can kick it off to another agent to flag that the case is in review. So while it extracts the relevant information to identify the customer as well as the sales or support associate that works with that customer, it can email both of them about the support ticket and connect them. Now let's see how these agentic qualities directly contrast with traditional models. Unlike the passive nature of models, an agent's autonomy allows it to make decisions on when and how to act without waiting for explicit instructions. While models focus solely on their specific task, a well-designed agent's goal orientation allows it to strategize and coordinate multiple actions towards achieving broader objectives. Traditional models are static after deployment until manually retrained. But an agent's reactivity means it can respond to changing conditions in real time. And while models typically reset between interactions, an agent's persistence allows it to build on past experiences, creating a continuous learning loop. Think about it this way. A traditional ML model is like a specialized tool. It's incredibly powerful for its designated purpose, but it's unable to adapt beyond its design. An agent, by contrast, is more like a resourceful assistant who can select different tools, decide when to use them, and then adjust strategies as your circumstances change. As a comparison, a model is like a calculator, an incredibly useful machine that can carry out tasks based on its input. An agent is like a mathematician that uses the calculator. It decides the best way to use it to achieve its goals. This distinction matters tremendously for business applications. Models work best when problems are well-defined and stable. Agents become valuable when challenges require adaptation, initiative, and coordination across multiple domains or systems. In our next video, we're going to explore some real-world examples that demonstrate these differences in action, showing you exactly how these contrasting capabilities can translate into business value.
              </p>
          </div>